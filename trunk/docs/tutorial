## pyndk
#
# An implementation of 'Reactor' in python
#

Pyndk 是一个高效的，简单的，易使用的基于Python的网络开发框架。它借鉴了C++界强大
的网络开发库ACE，以Python的形式实现了高效，可复用的，异步网络处理框架。

pyndk/reactor.py
  
  Class Reactor(object)
  | 基于事件驱动的异步处理反应器模型。
  | 
  | Reactor([select_type='any'[, thread_safe=True]]) -> object
  |     返回一个反应器对象，
  |     @select_type 参数可以指定事件分离器类型，框架默认
  |     会选择平台内支持的最优事件分离器。
  |     目前支持'select', 'epoll', 'poll' 三种类型。
  |     @thread_safe 指定此反应器是否为线程安全。
  |
  | open([max_size = -1]) -> bool
  |     打开反应器，申请系统资源，初始化数据结构, 并根据指定<select_type> 创建
  |     相应事件反应器对象。
  |     @max_size 反应器允许注册的最大事件数量，如果<= 0, 系统将采用默认值，在
  |     windows平台max_size = 512 这是Python-x.x.x/Modules/selectmodule.c 加
  |     预定义的值，unix 平台使用的是进程最大允许打开的文件句柄数，select除外，
  |     它使用的是1024，这个系统默认的值。
  |
  | close() -> None
  |     关闭反应器，回收资源。
  |
  | deactivated() -> None
  |     终止反应器循环。
  |
  | activated() -> bool
  |     检查反应器是否处于活跃状态。
  |
  | lock() -> object
  |     返回反应器互斥对象。
  |     object 有 acquire release 两个方法，acquire(True) 会唤醒反应器。
  |
  | reactor_event_loop() -> None
  |     内建的反应器循环。
  |
  | register_handler(handle, ehandler, event_mask) -> bool
  |     注册一个文件句柄和它相关联的事件类型的事件对象，线程安全。
  |     一个事件对象可以关联多个文件句柄。
  |     @handle 文件句柄, 一个非负整数。
  |     @ehandler 事件对象，继承自EventHandler的对象实例。
  |     @event_mask 是一系列位集合，可以通过｜操作符同时注册多个事件类型，具体包括： 
  |     READ_MASK    : 可读事件
  |     WRITE_MASK   : 可写事件
  |     EXCEPT_MASK  : 异常事件
  |     ACCEPT_MASK  : 接收连接事件
  |     CONNECT_MASK : 主动连接事件 
  |     EDGE_MASK    : 针对epoll的边缘触发模型
  |
  | remove_handler(handle, event_mask) -> bool
  |     移除文件句柄相应的事件类型的事件处理器。如果文件句柄所关联的事件类型为空，
  |     那么此句柄将从反应器中移除。
  |     @handle 文件句柄或事件处理对象，如果是事件处理对象那么框架会通过
  |     handle.get_handle()方法获取文件句柄。
  |     @event_mask 要移除的事件类型。
  |
  | schedule_timer(ehandler, arg, delay, interval = 0.0) -> int
  |     向反应器内注册一个定时器，如果成功会回返一个非负整数做为定时器ID，否则会
  |     返回-1。
  |     @ehandler 一个函数或继承自EventHandler对象的实例，定时器到期时会回调
  |     ehandler.handle_timeout方法，如果是一个函数类型，那么必须是这样的类型
  |     'def handler(current_time, arg):'
  |     @arg 定时器的参数，会在回调时传递过去。
  |     @delay 定时器延时的时间，float类型的相对时间秒值，即定时器注册后多长时间
  |     后被触发。
  |     @interval 循环间隔时间，float类型的相对时间秒值，即延时时间过后，定时器
  |     会按这个间隔值循环触发，如果间隔时间为0那么定时器只会触发一次。
  | 
  | crontab(ehandler, arg, entry) -> int
  |     向反应器内注册一个像unix平台cron定时服务的定时器类型，如果成功返回一个非负
  |     整数做为定时器ID，否则返回-1。
  |     @ehandler 定时器处理函数或者继承自EventHandler的对象实例。定时器到期时会回
  |      调ehandler.handle_timeout方法，如果是一个函数类型，那么必须是这样的类型
  |      'def handler(current_time, arg):'
  |     @arg  定时器参数，会在回调时传递过去。
  |     @entry unix的crontab类似的定时器格式。
  |     Format:
  |     *       *       *       *       *
  |     Min    Hour    Mday    Month   Wday
  | 
  |     The fields are:
  |     Min       minute of execution, 0-59
  |     Hour      hour of execution, 0-23
  |     Mday      day of month of execution, 1-31
  |     Month     month of execution, 1-12 (or names)
  |     Wday      day of week of execution, 0-7 (1 = monday, 0 or 7 = sunday, 
  |               or names)
  | 
  |     Possible values:
  |     *       matches all values, e.g. a * in month means: "every month"
  |     x-y     matches the range x to y, e.g. 2-4 in Mday means "on the 
  |             2nd, 3rd, and 4th of the month"
  |     x/n     in range x with frequency n, e.g. */2 in Hour means "every other hour"
  | 
  |     Months can be names: jan, Feb, mAr (case insensitive). (use 3 chars)
  |     Weekdays can be names, e.g. sun, Mon, tUe. (use 3 chars, no case)
  | 
  |     Notes:
  |     1). Ranges and lists can be mixed. 
  |         e.g. 1,3-5 (means "1 3 4 5") 1,3-7/2 (means "1 3 5 7")
  |     2). Ranges can specify 'step' values. '10-16/2' is like '10,12,14,16'
  |     3). Ranges can be opened region. e.g. '2-' in hour means '2-23',
  |         '-15' in hour means '0-15', '-' is '*'
  |     4). List support '1,2,3,5-9,15-21/2,25/2,50-8,*/2,*,,' (this can be one entry,
  |         means '*', will calculate the collection of region.)
  | 
  |     Special entries:
  |     ------          -------
  |     @yearly         Run once a year, "0 0 1 1 *".
  |     @monthly        Run once a month, "0 0 1 * *".
  |     @weekly         Run once a week, "0 0 * * 0".
  |     @daily          Run once a day, "0 0 * * *".
  |     @hourly         Run once an hour, "0 * * * *".
  | 
  |     Examples:
  |     '30 0 1 1,6,12 *'       00:30 Hrs on 1st of Jan, June & Dec.
  |     '* * 1,15 * Sun'        Will run on the first and fifteenth AND every Sunday;
  |     '* 20 * 10 1-5'         8.00 PM every weekday (Mon-Fri) only in Oct.
  |     '0 7-23/3 * * *'        Every 3-hours while awake
  |     '*/5 6-13 * * mon-fri'  Every 5 minutes during market hours
  |     '0 12 * * 0,2,4'        Will run at noon every sun,tues,thurs 
  |     '0 18-7 * * 1-5'        6pm-7am every hour during weekdays.
  |
  | reset_timer_interval(timer_id, interval) -> bool
  |     重新设置定时器间隔时间，     
  |     @timer_id 一个schedule_timer返回的非负整数。
  |     @interval 新的循环间隔值，float类型的相对时间秒值。
  |
  | cancel_timer(timer_id, dont_call_handle_close = True) -> bool
  |     取消一个定时器。    
  |     @timer_id 一个schedule_timer或crontab返回的非负整数。
  |     @dont_call_handle_close 决定是否在取消时回调handle_close对象。
  |
  | notify() -> None
  |     此方法会唤醒反应器。
  |
  | payload() -> int
  |     返回反应器的负载，即当前注册的事件数。线程安全。
 -+-

pyndk/event_handler.py   

  整数常量：
  NULL_MASK    : 空事件
  READ_MASK    : 可读事件
  WRITE_MASK   : 可写事件
  EXCEPT_MASK  : 异常事件
  ACCEPT_MASK  : 接收连接事件
  CONNECT_MASK : 主动连接事件 
  EDGE_MASK    : 针对epoll的边缘触发模型
  ALL_EVENTS_MASK : 所有的事件集合
  DONT_CALL    : 不会回调handle_close

  Class EventHandler(object)
  | 事件处理器对象的基类。 
  | 实例属性：
  | _reactor 事件处理器被注册到的反应器对象。
  |
  | handle_input(handle) -> bool
  |     READ_MASK事件触发时会回调此方法。返回False时框架会回调handle_close方法。
  |     @handle 注册的文件句柄
  | 
  | handle_ouput(handle) -> bool
  |     WRITE_MASK事件触发时会回调此方法。返回False时框架会回调handle_close方法。
  |     @handle 注册的文件句柄
  |
  | handle_exception(handle) -> bool
  |     EXCEPT_MASK触发时会回调此方法。返回False时框架会回调handle_close方法。
  |     @handle 注册的文件句柄
  |
  | handle_timeout(curr_time, arg) -> bool
  |     定时器触发时会回调此方法。返回False时框架会回调handle_close方法，并从定
  |     时器队列中移除。
  |     @curr_time 当前时间。值来自于time.time()
  |     @arg 注册时传递给Reactor的参数。
  |
  | handle_close(handle, close_mask) -> bool
  |     handle_*() 方法返回False时会回调此方法。
  |     @handle 注册的文件句柄
  |     @close_mask 产生回调handle_close方法的事件类型。
  |
  | get_reactor() -> object
  |     返回事件处理器被注册到的反应器对象。
  |
  | set_reactor() -> None
  |     设置事件处理器被注册到的反应器对象。
  |
  | get_handle() -> int
  |     返回文件句柄
  |
  | set_handle(h) -> None
  |     设置文件句柄
 -+-

pyndk/svc_handler.py

  Class SvcHandler(EventHandler)
  | 服务对象基类。
  | 实例属性：
  | _peer socket对象实例。
  |
  | open(arg) -> bool
  |     会被Acceptor和Connector框架回调。返回False框架会回调close方法
  |
  | close(mask) -> bool
  |     当open方法返回False时，框架会回调此方法。
  | 
  | set_remote_addr(addr) -> None
  |     Acceptor框架接收到新连接时会回调此方法保存远程连接的地址(tuple类型 
  |     (hostaddr, port))
  |
  | get_remote_addr() -> tuple
  |     返回远程连接地址信息。
  |
  | set_peer(peer) -> None
  |     设置socket对象。
  |
  | get_peer() -> socket
  |     返回socket对象。
 -+- 

pyndk/acceptor.py

  Class Acceptor(EventHandler)
  | 异步接收被动连接的服务框架。
  | 实例属性：
  | _svc_handler 被动连接对象的对象类型，必须是继承自SvcHandler的对象。
  | _socket 监听socket对象实例。
  | 
  | open(address,reactor,reuse_addr=True,rcvbuf_size=0,backlog=1024,nonblocking=True) -> bool
  |     初始化Acceptor框架，创建监听socket对象实例。
  |     @address tuple类型(hostaddr, port)。要监听的本地地址。
  |     @reactor Acceptor要注册的反应器对象
  |     @reuse_addr 是否要设置SO_REUSEADDR 选项。
  |     @rcvbuf_size 设置TCP协议栈缓冲区（如果rcvbuf_size ＞0)
  |     @backlog socket.listen的参数，即TCP协议栈接收连接的队列长度。
  |     @nonblocking 是否将新接收到的socket连接对象设置为非阻塞型的。
  | 
  | close() -> bool
  |     关闭Acceptor服务，回收listen socket对象的资源。
  | 
  | get_handle() -> int
  |     返回listen文件句柄，即socket.fileno()
  | 
  | handle_input(handle) -> bool
  |     当有新连接时，被注册的反应器会回调此方法，创建_svc_handler类型的服务
  |     实例，并调用_svc_handler::set_reactor、_svc_handler::set_peer、
  |     _svc_handler::set_remote_addr、_svc_handler::open 方法，当
  |     _svc_handler::open返回False还会回调_svc_handler::close方法。
  | 
  | handle_close(handle, event_mask)
  |     当Acceptor框架被关闭时，会被回调，然后从反应器移除。
 -+- 

pyndk/connector.py

  Class Connector(EventHandler)
  | 创建主动连接的异步服务框架。
  | 
  | open(r) -> bool
  |     初始化Connector实例。
  | 
  | connect(svc_handler,remote_addr,timeout=0,rcvbuf_size=0,local_addr=None,nonblocking=True) -> None
  |     创建异步连接方法。
  |     连接成功后框架会自动回调svc_handler.open方法，反之则回调svc_handler.close。
  |     @svc_handler 继承自SvcHandler的服务对象实例。
  |     @remote_addr 要连接的远程主机地址，tuple类型(hostaddr, port)。
  |     @timeout 如果值为 < 0则创建一个阻塞式的连接，如果值为0则创建一个非阻塞
  |     式的连接，如果值为 > 0 则创建一个非阻塞式的连接，并设超时值为timeout, 
  |     如果在timeout时间内连接还未创建成功，则认为连接失败。
  |     @rcvbuf_size 设置TCP协议栈的接收缓冲区大小(如果rcvbuf_size ＞0)，
  |     记住，接收缓冲区只有在三次握手之前设置才有效。
  |     @local_addr 需要绑定的本地地址。
  |     @nonblocking 是否将连接成功的socket对象设置为非阻塞型的。
 -+- 
   
pyndk/timer_queue.py
   
  Class TimerQueue(EventHandler)
  | 定时器队列对象，此对象不是线程安全的。
  | 
  | empty() -> bool
  |     队列是否为空
  | 
  | schedule(ehandler, arg, delay_time, interval_time) -> int
  |     参照Reactor::schedule_timer 文档。
  | 
  | crontab(ehandler, arg, entry) -> int
  |     参照Reactor::crontab 文档。
  | 
  | expire(current_time) -> int
  |     根据current_time来检查已经到定时器周期的定时器。并回调
  |     ehandler.handle_close方法或ehandler()
  | 
  | cancel(timer_id, dont_call_handle_close = True) -> bool
  |     参照Reactor::cancel 文档。
  | 
  | get_timerid_by_handler(ehandler) -> int 
  |     根据已经注册到定时器队列的处理对象或方法找到相关联的定时器ID。
  | 
  | reset_interval(timer_id, interval_time) 
  |     参照Reactor::reset_timer_interval 文档。
  | 
  | calculate_timeout(max_wait_time) -> float 
  |     计算出定时器队列中距离当前时间最近的定时器差值，如果定时器队列为空则直接
  |     返回max_wait_time。
 -+- 

examples/ab.py

  类似apache benchmarking 的简单工具
  启动参数：python3.1 ab.py 10(concurrency) 10000(requests) http://127.0.0.1:8000/

examples/simple_svc.py
  简单的监听服务，可以创建多个反应器，创建多个监听服务。
  启动参数：python simple_svc.py
  
examples/port_scanner.py
  异步端口扫描程序。
  启动参数：python port_scanner.py 127.0.0.1 8000-9000

examples/crontab.py
  crontab类型定时器的示例程序。

examples/timer.py
  定时器使用示例。


